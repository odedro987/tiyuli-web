/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: get_expense.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./expense";
import * as pb_1 from "google-protobuf";
export namespace tiyuli.expense {
    export class GetExpenseByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetExpenseByIdRequest {
            const message = new GetExpenseByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExpenseByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExpenseByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExpenseByIdRequest {
            return GetExpenseByIdRequest.deserialize(bytes);
        }
    }
    export class GetExpenseByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            expense?: dependency_1.tiyuli.expense.Expense;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expense" in data && data.expense != undefined) {
                    this.expense = data.expense;
                }
            }
        }
        get expense() {
            return pb_1.Message.getWrapperField(this, dependency_1.tiyuli.expense.Expense, 1) as dependency_1.tiyuli.expense.Expense;
        }
        set expense(value: dependency_1.tiyuli.expense.Expense) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_expense() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            expense?: ReturnType<typeof dependency_1.tiyuli.expense.Expense.prototype.toObject>;
        }): GetExpenseByIdResponse {
            const message = new GetExpenseByIdResponse({});
            if (data.expense != null) {
                message.expense = dependency_1.tiyuli.expense.Expense.fromObject(data.expense);
            }
            return message;
        }
        toObject() {
            const data: {
                expense?: ReturnType<typeof dependency_1.tiyuli.expense.Expense.prototype.toObject>;
            } = {};
            if (this.expense != null) {
                data.expense = this.expense.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_expense)
                writer.writeMessage(1, this.expense, () => this.expense.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExpenseByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExpenseByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.expense, () => message.expense = dependency_1.tiyuli.expense.Expense.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetExpenseByIdResponse {
            return GetExpenseByIdResponse.deserialize(bytes);
        }
    }
}
